@if (this.LinkType == LinkTypes.None || string.IsNullOrEmpty(this.Href))
{
    <span class=@this.class_NoName disabled=@this.ParamIsDisabled>
    @this.Name
    </span>
}
else if (this.LinkType == LinkTypes.Open)
{
    <span class=@this.class_NoName disabled=@this.ParamIsDisabled>
    @this.Name
    </span>
    <a href=@this.Href target="">open</a>
}
else if (this.LinkType == LinkTypes.Self)
{
    <a href=@this.Href class=@this.class_NoName>@this.Name</a>
}
@code {
  [Parameter] public string? ParamNoName { get; set; }
  [Parameter] public bool? ParamIsDisabled { get; set; }
  [Parameter] public string? ParamName { get; set; }
  private string Name { get; set; }
  private bool NoName { get; set; } = false;
  private string? class_NoName => this.NoName ? "no-name" : null;
  [Parameter] public string? ParamHref { get; set; }
  public string? Href { get; set; } = null;
  [Parameter]
  public LinkTypes? ParamLinkType { get; set; }
  public LinkTypes LinkType { get; set; } = LinkTypes.Self;
  protected override async Task OnParametersSetAsync()
  {
    this.NoName = string.IsNullOrWhiteSpace(this.ParamName);
    if (this.NoName)
      this.Name = this.ParamNoName ?? "no-name";
    else
      this.Name = this.ParamName!;
    this.LinkType = this.ParamLinkType ?? this.LinkType;
    this.Href = this.ParamHref ?? (this.LinkType == LinkTypes.None ? this.Href : throw new ArgumentNullException("ParamHref is required"));
    await base.OnParametersSetAsync();
  }
}
