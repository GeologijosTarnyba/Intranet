@page "/inv/ats/{ParamAsmID:int}"
<h3>Index</h3>
@inject Data.GeolisContext db
@code {
  override protected async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      var busenuId = await db.Set<Core.Inv.Busena>().Select(item => item.ID).Distinct().ToListAsync();
      busenos = new Dictionary<string, bool>();
      foreach (var id in busenuId)
      {
        busenos.Add(id, true);
      }
      var tipuId = await db.Set<Core.Inv.IrangosTipas>().Select(item => item.ID).Distinct().ToListAsync();
      this.tipai = new Dictionary<string, bool>();
      foreach (var id in tipuId)
      {
        tipai.Add(id, false);
      }
      StateHasChanged();
    }
  }
  override protected async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();

  }


  [Parameter] public int ParamAsmID { get; set; } = 140;
  Dictionary<string, bool> busenos = new();
  Dictionary<string, bool> tipai = new();
  bool queryChanged { get; set; } = true;
  string[] dominanciosBusenos;
  string[] dominantysTipai;
  private void X()
  {
    dominanciosBusenos = busenos.Where(item => item.Value == true).Select(item => item.Key).ToArray();
    dominantysTipai = tipai.Where(item => item.Value == true).Select(item => item.Key).ToArray();
    queryChanged = false;
    StateHasChanged();
  }
}
<div class="row">
  <div class="col-auto border">
    @foreach (var tip in tipai)
    {
      <div>
        <label>
          <input type="checkbox"
            @onchange=@((ChangeEventArgs val) => {
              tipai[tip.Key] = (bool)val.Value!;
              queryChanged = true;
            })
            checked="@tip.Value" 
          />
          @tip.Key
        </label>
      </div>
    }
  </div>
  <div class="col-auto border">
    @foreach (var bus in busenos)
    {
      <div>
        <label>
          <input type="checkbox"
               @onchange=@((ChangeEventArgs val) => {
               busenos[bus.Key] = (bool)val.Value!;
               queryChanged = true;
               })
                 checked="@bus.Value" />
          @bus.Key
        </label>
      </div>
    }
  </div>
  <button disabled="@(!queryChanged)" @onclick=@(() => {
    X();
    this.StateHasChanged();
  })>
    Search
  </button>
</div>
@if (dominanciosBusenos?.Any() == true && dominantysTipai?.Any() == true)
{
  <ul>
    @foreach (var x in dominanciosBusenos)
    {
      <li>
        @x
      </li>
    }
  </ul>
  <br />
  <ul>
    @foreach (var x in dominantysTipai)
    {
      <li>
        @x
      </li>
    }
  </ul>
  <hr />
  <ExpList ParamSource=@(
    db.Set<Core.Geoldba.Asmuo>().Where(item => item.ID == ParamAsmID)
         .Include(item => item.AtsakingasUzIranga.Where(item => dominanciosBusenos.Contains(item.BusenaID) && dominantysTipai.Contains(item.TipasID) ))
        .ThenInclude(item => item.Vieta)
        .ThenInclude(item => item.Asmuo)
        .AsNoTracking()
    )
  >
    <Wrapper Context="rows"><table class="bord">@rows</table></Wrapper>
    <IfSome Context="ats">
      <h5>@ats</h5>
      @if (ats.AtsakingasUzIranga.Any())
      {
        @foreach (var iranga in ats.AtsakingasUzIranga.OrderByDescending(item => item.DatePajamavimo))
        {
          <tr>
            <td>
              @iranga.ID
              @iranga.TipasID
            </td>
            <td>
              @if (iranga.Vieta != null)
              {
                @iranga.Vieta.DarboVietaID
              }
            </td>
            <td>
              @if (iranga.Vieta?.Asmuo != null)
              {
                @iranga.Vieta.Asmuo
              }
            </td>
          </tr>
        }
      }
    </IfSome>
  </ExpList>
}
else
{
  <div>Trūksta paieškos parametrų kad kažką rasti.</div>
}