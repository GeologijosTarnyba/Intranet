@code {
  [Parameter] public int? id { get; set; }
  [Parameter] public EventCallback<int?> idChanged { get; set; }
  [Parameter] public string? ParamAptarnaujantiImoneID { get; set; }
  override protected async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
    if(this.chosenAptarnaujantiImoneID == null)
    {
      this.chosenAptarnaujantiImoneID = ParamAptarnaujantiImoneID;  
    }
  }
}
@inject LGT.Internals.Database db
@if(this.ParamAptarnaujantiImoneID == null)
{
  <ChooseAptarnaujantiImone
    id=@chosenAptarnaujantiImoneID
    idChanged=@(async (val) => {
      chosenAptarnaujantiImoneID = val;
      await Unchoose();
    })
  />
}
@if (this.id == null)
{
  @if (chosenAptarnaujantiImoneID != null)
  {
    <ExpList ParamSource=@(
      db.Set<Kreipinys>()
        .Where(item => item.AptarnaujantiImoneID == chosenAptarnaujantiImoneID)
        .OrderByDescending(item => item.Since).ThenByDescending(item => item.CreatedAt)
        .Select(td => new {
          td.ID,
          Name = td.UName
        })
      )>
      <Wrapper Context="rows">
        <ul>@rows</ul>
      </Wrapper>
      <IfSome Context="kreipinys">
        <li>
          <ActionButton onclick=@(async () => await Choose(kreipinys.ID, kreipinys.Name))>
            <Name ParamName=@kreipinys.Name />
          </ActionButton>
        </li>
      </IfSome>
      <IfNone>
        <div class="text-danger">darbovietė neturi darbuotojų</div>
      </IfNone>
    </ExpList>
  }
}
else
{
  <text>&raquo;</text>
  <ActionButton onclick=@(async () => await Unchoose())>
    <Name ParamName=@(this.chosenName) />
  </ActionButton>
}
@code {
  private string? chosenName;
  private string? chosenAptarnaujantiImoneID;
  private async Task Choose(int id, string? name)
  {
    await this.idChanged.InvokeAsync(id);
    this.chosenName = name ?? $"kreipinys ID={id}";
  }
  private async Task Unchoose()
  {
    if (id != null)
    {
      await this.idChanged.InvokeAsync(null);
    }
    this.chosenName = null;
  }
}