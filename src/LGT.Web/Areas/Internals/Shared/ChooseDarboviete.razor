@code {
  [Parameter] public string? id { get; set; }
  [Parameter] public EventCallback<string?> idChanged { get; set; }
  [Parameter] public System.Linq.Expressions.Expression<Func<Darboviete, bool>> ParamExtraFilter { get; set; } = item => true;
}
@inject LGT.Internals.Database db
@if (this.id == null)
{
  <ExpList ParamSource=@(
    db.Set<Darboviete>()
      .Where(ParamExtraFilter)
      .OrderByDescending(item => item.OrderWeight)
      .Select(item => new {item.ID, item.Name })
  )>
    <Wrapper Context="rows">
      <ul>@rows</ul>
    </Wrapper>
    <IfSome Context="darboviete">
      <li>
        <ActionButton onclick=@(async () => await Choose(darboviete.ID, darboviete.Name))>
          @darboviete.Name
        </ActionButton>
      </li>
    </IfSome>
    <IfNone>-</IfNone>
  </ExpList>
}
else
{
  <ActionButton onclick=@Unchoose>
    <Name ParamName=@name />
  </ActionButton>
}

@code {
  private string? name { get; set; }
  private async Task Unchoose()
  {
    await this.idChanged.InvokeAsync(null);
    this.name = null;
  }
  private async Task Choose(string id, string name)
  {
    await this.idChanged.InvokeAsync(id);
    this.name = name;
  }
}