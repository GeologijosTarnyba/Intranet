@code {
  [Parameter] public string? id { get; set; }
  [Parameter] public EventCallback<string?> idChanged { get; set; }

  [Parameter] public LGT.Incidentai.Models.Kontaktai.Darboviete? value { get; set; }
  [Parameter] public EventCallback<LGT.Incidentai.Models.Kontaktai.Darboviete?> valueChanged { get; set; }

  [Parameter] public System.Linq.Expressions.Expression<Func<Darboviete, bool>> ParamExtraFilter { get; set; } = item => true;
}
@inject LGT.Intranet.Internal.InternalContext db
@if (this.id == null && this.value == null)
{
  <ExpList ParamSource=@(
         this.db.Set<LGT.Incidentai.Models.Kontaktai.Darboviete>()
      .Where(ParamExtraFilter)
      .OrderByDescending(item => item.OrderWeight)
  )>
    <Wrapper Context="rows">
      <ul>@rows</ul>
    </Wrapper>
    <IfSome Context="darboviete">
      <li>
        <ActionButton onclick=@(async () => await Choose(darboviete))>
          @darboviete.Name
        </ActionButton>
      </li>
    </IfSome>
    <IfNone>-</IfNone>
  </ExpList>
}
else
{
  <ActionButton onclick=@Unchoose>
    <Name ParamName=@name />
  </ActionButton>
}

@code {
  private string? name { get; set; }
  private async Task Unchoose()
  {
    await this.idChanged.InvokeAsync(null);
    await this.valueChanged.InvokeAsync(null);
    this.name = null;
  }
  private async Task Choose(LGT.Incidentai.Models.Kontaktai.Darboviete val)
  {
    await this.idChanged.InvokeAsync(val.ID);
    await this.valueChanged.InvokeAsync(val);
    this.name = val.Name;
  }
}
