// <auto-generated />
using System;
using LGT.Intranet.Internal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LGT.Intranet.Migrations.InternalContextMigrations
{
    [DbContext(typeof(InternalContext))]
    [Migration("20240320110958_Initial commit")]
    partial class Initialcommit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("LGT.Incidentai.Models.AptarnavimoSutartis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AptarnaujantiImoneID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime()");

                    b.Property<DateTime?>("Since")
                        .HasColumnType("TEXT")
                        .HasColumnName("Iki");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("TEXT")
                        .HasColumnName("Nuo");

                    b.HasKey("ID");

                    b.HasIndex("AptarnaujantiImoneID");

                    b.ToTable("I_AptarnavimoSutartis", (string)null);
                });

            modelBuilder.Entity("LGT.Incidentai.Models.Incidentas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime()");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("InformacinisIstekliusID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PozymisID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Since")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("InformacinisIstekliusID");

                    b.HasIndex("PozymisID");

                    b.ToTable("I_Incidentas", (string)null);
                });

            modelBuilder.Entity("LGT.Incidentai.Models.IncidentoPozymis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("I_IncidentoPozymis", (string)null);
                });

            modelBuilder.Entity("LGT.Incidentai.Models.InformacinisIsteklius", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("DarbovieteID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("Priklauso");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentID")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("Parent");

                    b.HasKey("ID");

                    b.HasIndex("DarbovieteID");

                    b.HasIndex("ParentID");

                    b.ToTable("I_InformacinisIsteklius", (string)null);
                });

            modelBuilder.Entity("LGT.Incidentai.Models.Kreipinys", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AptarnaujantiImoneID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime()");

                    b.Property<int?>("IncidentasID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Link")
                        .HasColumnType("TEXT")
                        .HasColumnName("Nuoroda");

                    b.Property<string>("RequestText")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Since")
                        .HasColumnType("TEXT")
                        .HasColumnName("Nuo");

                    b.Property<string>("SolutionText")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("UName")
                        .HasColumnType("TEXT")
                        .HasColumnName("Krepinys");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("TEXT")
                        .HasColumnName("Iki");

                    b.HasKey("ID");

                    b.HasIndex("AptarnaujantiImoneID");

                    b.HasIndex("IncidentasID");

                    b.ToTable("I_Kreipinys", (string)null);
                });

            modelBuilder.Entity("LGT.Incidentai.Models.Skundas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AsmuoID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Asmuo_FreeForm")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("At")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime()");

                    b.Property<int?>("DarbuotojasID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IncidentasID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Markdown")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TypeID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeID");

                    b.HasKey("ID");

                    b.HasIndex("AsmuoID");

                    b.HasIndex("DarbuotojasID");

                    b.HasIndex("IncidentasID");

                    b.HasIndex("TypeID");

                    b.ToTable("I_Skundas", (string)null);
                });

            modelBuilder.Entity("LGT.Incidentai.Models.SkundasType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("I_SkundasType", (string)null);
                });

            modelBuilder.Entity("LGT.Incidentai.Models.Sprendimas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime()");

                    b.Property<int?>("DarbuotojasID")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("KreipinysID")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Since")
                        .HasColumnType("TEXT");

                    b.Property<string>("SolutionMarkdown")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("DarbuotojasID");

                    b.HasIndex("KreipinysID");

                    b.ToTable("I_Sprendimas", (string)null);
                });

            modelBuilder.Entity("LGT.Kontaktai.Models.Asmuo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("K_Asmuo", (string)null);
                });

            modelBuilder.Entity("LGT.Kontaktai.Models.Darboviete", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderWeight")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("K_Darboviete", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("LGT.Kontaktai.Models.Darbuotojas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AsmuoID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Asmuo");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime()");

                    b.Property<string>("DarbovieteID")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Darboviete");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("Pareigybe");

                    b.Property<DateTime?>("Since")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tel1")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tel2")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tel3")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tel4")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AsmuoID");

                    b.HasIndex("DarbovieteID");

                    b.ToTable("K_Darbuotojas", (string)null);
                });

            modelBuilder.Entity("LGT.Incidentai.Models.AptarnaujantiImone", b =>
                {
                    b.HasBaseType("LGT.Kontaktai.Models.Darboviete");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.ToTable("I_AptarnaujantiImone", (string)null);
                });

            modelBuilder.Entity("LGT.Incidentai.Models.AptarnavimoSutartis", b =>
                {
                    b.HasOne("LGT.Incidentai.Models.AptarnaujantiImone", "AptarnaujantiImone")
                        .WithMany("Sutartys")
                        .HasForeignKey("AptarnaujantiImoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AptarnaujantiImone");
                });

            modelBuilder.Entity("LGT.Incidentai.Models.Incidentas", b =>
                {
                    b.HasOne("LGT.Incidentai.Models.InformacinisIsteklius", "InformacinisIsteklius")
                        .WithMany()
                        .HasForeignKey("InformacinisIstekliusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGT.Incidentai.Models.IncidentoPozymis", "Pozymis")
                        .WithMany()
                        .HasForeignKey("PozymisID");

                    b.Navigation("InformacinisIsteklius");

                    b.Navigation("Pozymis");
                });

            modelBuilder.Entity("LGT.Incidentai.Models.InformacinisIsteklius", b =>
                {
                    b.HasOne("LGT.Kontaktai.Models.Darboviete", "Darboviete")
                        .WithMany()
                        .HasForeignKey("DarbovieteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGT.Incidentai.Models.InformacinisIsteklius", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");

                    b.Navigation("Darboviete");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("LGT.Incidentai.Models.Kreipinys", b =>
                {
                    b.HasOne("LGT.Incidentai.Models.AptarnaujantiImone", "AptarnaujantiImone")
                        .WithMany("Krepiniai")
                        .HasForeignKey("AptarnaujantiImoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGT.Incidentai.Models.Incidentas", "Incidentas")
                        .WithMany("Kreipiniai")
                        .HasForeignKey("IncidentasID");

                    b.Navigation("AptarnaujantiImone");

                    b.Navigation("Incidentas");
                });

            modelBuilder.Entity("LGT.Incidentai.Models.Skundas", b =>
                {
                    b.HasOne("LGT.Kontaktai.Models.Asmuo", "Asmuo")
                        .WithMany()
                        .HasForeignKey("AsmuoID");

                    b.HasOne("LGT.Kontaktai.Models.Darbuotojas", "Darbuotojas")
                        .WithMany()
                        .HasForeignKey("DarbuotojasID");

                    b.HasOne("LGT.Incidentai.Models.Incidentas", "Incidentas")
                        .WithMany("Skundai")
                        .HasForeignKey("IncidentasID");

                    b.HasOne("LGT.Incidentai.Models.SkundasType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID");

                    b.Navigation("Asmuo");

                    b.Navigation("Darbuotojas");

                    b.Navigation("Incidentas");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("LGT.Incidentai.Models.Sprendimas", b =>
                {
                    b.HasOne("LGT.Kontaktai.Models.Darbuotojas", "Darbuotojas")
                        .WithMany()
                        .HasForeignKey("DarbuotojasID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGT.Incidentai.Models.Kreipinys", "Kreipinys")
                        .WithMany("Sprendimai")
                        .HasForeignKey("KreipinysID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Darbuotojas");

                    b.Navigation("Kreipinys");
                });

            modelBuilder.Entity("LGT.Kontaktai.Models.Darbuotojas", b =>
                {
                    b.HasOne("LGT.Kontaktai.Models.Asmuo", "Asmuo")
                        .WithMany("DarbovieteAssignments")
                        .HasForeignKey("AsmuoID");

                    b.HasOne("LGT.Kontaktai.Models.Darboviete", "Darboviete")
                        .WithMany("DarbuotojasAssignments")
                        .HasForeignKey("DarbovieteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asmuo");

                    b.Navigation("Darboviete");
                });

            modelBuilder.Entity("LGT.Incidentai.Models.AptarnaujantiImone", b =>
                {
                    b.HasOne("LGT.Kontaktai.Models.Darboviete", null)
                        .WithOne()
                        .HasForeignKey("LGT.Incidentai.Models.AptarnaujantiImone", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LGT.Incidentai.Models.Incidentas", b =>
                {
                    b.Navigation("Kreipiniai");

                    b.Navigation("Skundai");
                });

            modelBuilder.Entity("LGT.Incidentai.Models.InformacinisIsteklius", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("LGT.Incidentai.Models.Kreipinys", b =>
                {
                    b.Navigation("Sprendimai");
                });

            modelBuilder.Entity("LGT.Kontaktai.Models.Asmuo", b =>
                {
                    b.Navigation("DarbovieteAssignments");
                });

            modelBuilder.Entity("LGT.Kontaktai.Models.Darboviete", b =>
                {
                    b.Navigation("DarbuotojasAssignments");
                });

            modelBuilder.Entity("LGT.Incidentai.Models.AptarnaujantiImone", b =>
                {
                    b.Navigation("Krepiniai");

                    b.Navigation("Sutartys");
                });
#pragma warning restore 612, 618
        }
    }
}
